package arrowtools

import (
	"github.com/apache/arrow/go/arrow"
	"github.com/apache/arrow/go/arrow/array"
)

func getnull(col array.Interface, msk []bool, da *array.Data) {

	switch col.DataType() {
	{{- range . }}
		case arrow.PrimitiveTypes.{{ .Utype }}:
			x := array.New{{ .Utype }}Data(da)
			for i := range msk {
				msk[i] = msk[i] || x.IsNull(i)
			}
	{{- end }}
	case arrow.BinaryTypes.String:
		x := array.NewStringData(da)
		for i := range msk {
			msk[i] = msk[i] || x.IsNull(i)
		}
	default:
		panic("unknown type")
	}
}

func reduce(rec array.Record, bld *array.RecordBuilder, inds []int) {

	for j := range rec.Columns() {

		col := rec.Column(j)
		da := col.Data()

		switch col.DataType() {
		{{- range . }}
			case arrow.PrimitiveTypes.{{ .Utype }}:
				x := array.New{{ .Utype }}Data(da)
				for _, i := range inds {
					bld.Field(j).(*array.{{ .Utype }}Builder).Append(x.Value(i))
				}
		{{- end }}
		case arrow.BinaryTypes.String:
			x := array.NewStringData(da)
			for _, i := range inds {
				bld.Field(j).(*array.StringBuilder).Append(x.Value(i))
			}
		default:
			panic("unknown type")
		}
	}
}

