package arrowtools

import (
	"github.com/apache/arrow/go/arrow"
	"github.com/apache/arrow/go/arrow/array"
	"github.com/apache/arrow/go/arrow/memory"
)

{{ range . }}
    // ColumnFrom{{ .Utype }}Slices returns a pointer to an array.Column value that
    // holds the given {{ .Type }} data.
    func ColumnFrom{{ .Utype }}Slices(x [][]{{ .Type }}, valid [][]bool, name string) *array.Column {

    	mem := memory.DefaultAllocator
    	var y []array.Interface

    	fld := arrow.Field{Name: name, Type: arrow.PrimitiveTypes.{{ .Utype }}}
    	bld := array.New{{ .Utype }}Builder(mem)
    	for i, z := range x {
    	    var v []bool
    	    if valid != nil {
    	        v = valid[i]
    	    }
    		bld.AppendValues(z, v)
    		y = append(y, bld.NewArray())
    	}

    	chunks := array.NewChunked(fld.Type, y)
    	return array.NewColumn(fld, chunks)
    }
{{ end }}

{{ range . }}
    // {{ .Utype }}Column returns a slice of slices holding the
    // data from the given column.
    func (ch *ColumnHelper) {{ .Utype }}Slices() [][]{{ .Type }} {
    	var x [][]{{ .Type }}
    	for _, c := range ch.col.Data().Chunks() {
    		x = append(x, array.New{{ .Utype }}Data(c.Data()).{{ .Utype }}Values())
    	}
    	return x
    }
{{ end }}
