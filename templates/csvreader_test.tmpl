package arrowtools

import (
	"bytes"
	"io"
	"testing"

	"github.com/apache/arrow/go/arrow"
	"github.com/apache/arrow/go/arrow/array"
)

func TestCSV1(t *testing.T) {

	var buf bytes.Buffer
	io.WriteString(&buf, "xfloat64,xfloat32,xint64,xint32,xint16,xint8,xuint64,xuint32,xuint16,xuint8\n")
	io.WriteString(&buf, "0,0,0,0,0,0,0,0,0,0\n")
	io.WriteString(&buf, "1,1,1,1,1,1,1,1,1,1\n")
	io.WriteString(&buf, "2,2,2,2,2,2,2,2,2,2\n")
	io.WriteString(&buf, "3,3,3,3,3,3,3,3,3,3\n")

	var sh SliceHelper

    {{ range . }}
	    x{{ .Type }} := sh.{{ .Utype }}Column([][]{{ .Type }}{ {0, 1, 2, 3}, }, nil, "x{{ .Type }}")
	{{- end }}

	cols := []array.Column{
	    {{- range . }}
	        *x{{ .Type }},
	    {{- end }}
	}

	fields := []arrow.Field{
	    {{- range . }}
	        {Name: "x{{ .Type }}", Type: arrow.PrimitiveTypes.{{ .Utype }}},
	    {{- end }}
    }

	tbl1 := ReadCSV(&buf, fields, WithHeader())
	tbl2 := array.NewTable(arrow.NewSchema(fields, nil), cols, -1)

    if b, msg := TablesEqual(tbl1, tbl2); !b {
    	println(msg)
    	t.Fail()
    }
}